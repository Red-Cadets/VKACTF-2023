from Crypto.Util.number import long_to_bytes, bytes_to_long
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from pwn import *
import json
import tqdm


def get_decrypted_flag(x):
    io.sendline(payload3.encode())
    data_flag = json.loads(io.recvline().decode('utf-8').replace("'", '"')) 
    encrypted_flag = bytes.fromhex(data_flag['encrypted_flag'])
    secret = SHA256.new(long_to_bytes(x)).digest()
    flag = unpad(AES.new(secret, AES.MODE_ECB).decrypt(encrypted_flag), 16).decode()
    return flag

def  legendre_symbol(c, p):
    if pow(c, (p - 1) // 2, p) == 1:
      return 0
    else :
      return 1

check = 0
while  check != 1:
  
  io = remote("212.193.61.73", 2441)

  io.recvline()
  email = io.recvline()
  uname = io.recvline()
  io.recvline()

  data = json.loads(io.recvline())
  y = data['share_key_pub'][0]
  g = data['share_key_pub'][1]
  p = data['share_key_pub'][2]

  check = legendre_symbol(2, p)

len = long_to_bytes(1026)
x0r_key = xor(bytes.fromhex(data['share_key_enc'][:4]), len)


payload1 = json.dumps({"action": "wait_login"})
payload2 = json.dumps({"action": "send_challenge", "SID_enc": [2, 4], "share_key_enc": data['share_key_enc'], "master_key_enc": data['master_key_enc']})
payload3 = json.dumps({"action": "get_encrypted_flag"})


io.sendline(payload1.encode())
io.recvline()
io.recvline()
io.sendline(payload2.encode())
data_sid = json.loads(io.recvline().decode('utf-8').replace("'", '"')) 
SID = data_sid['SID']

x = ""
for i in tqdm.tqdm(range(1026, 2, -1)):

    io.sendline(payload1.encode())
    io.recvline()

    change_payload = xor(x0r_key, long_to_bytes(i, 2)).hex() + data['share_key_enc'][4:]
    payload2 = json.dumps({"action": "send_challenge", "SID_enc": [2, 4], "share_key_enc": change_payload, "master_key_enc": data['master_key_enc']})

    io.sendline(payload2.encode())
    data_sid = json.loads(io.recvline().decode('utf-8').replace("'", '"'))
    SID = data_sid['SID']
    SID = bytes_to_long(bytes.fromhex(SID))
    x = str(legendre_symbol(SID, p)) + x


x = int(x, 2) 
print("FLAG:", get_decrypted_flag(x))
